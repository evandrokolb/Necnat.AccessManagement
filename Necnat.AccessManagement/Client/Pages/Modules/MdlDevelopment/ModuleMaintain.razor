@page "/MdlDevelopment/ModuleMaintain"

@using Necnat.AccessManagement.Client.Components.Modules.MdlDevelopment

@attribute [Authorize]

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject IStringLocalizer<CommonLocalizer> CommonLocalizer
@inject IStringLocalizer<ModuleLocalizer> ModuleLocalizer
@inject INecnatSessionService Session
@inject INecnatSwalService SwalService

@inject NavigationManager Navigation
@inject SweetAlertService Swal
@inject NamHttpClient AppHttpClient

<div class="nn-page-title nn-pt1"><i class="fab fa-dev"></i> @ModuleLocalizer["Module"]</div>
@if (pageType == 'I')
{
    <div class="nn-page-title nn-pt2"> @CommonLocalizer["New {0}", ModuleLocalizer["Module"]]</div>
}
else if (pageType == 'U')
{
    <div class="nn-page-title nn-pt2"> @CommonLocalizer["Edit {0}", ModuleLocalizer["Module"]]</div>
}
else
{
    <div class="nn-page-title nn-pt2"> @CommonLocalizer["View {0}", ModuleLocalizer["Module"]]</div>
}
<br />
@if (isLoading == true)
{
    <img class="nn-loading nn-loading-center" src="../img/loading.gif" alt="@CommonLocalizer["Loading..."]" />
}
else
{
    <RadzenTemplateForm Data="@entity" Submit="@(async (Module args) => { await Save(args); })">
        <ModuleEntity @bind-Entity="entity" @bind-IsValidEntity="isValidEntity" AllDisabled="@(pageType == 'R')" ApplicationList="@applicationList" />
        <br />
        @if (pageType != 'R')
        {
            <button type="submit" class="btn float-right nn-button nn-button-primary nn-button-save"><i class="fas fa-save"></i> @CommonLocalizer["Save"]</button>
        }
    </RadzenTemplateForm>
    <button class="btn nn-button nn-button-back" @onclick="@Back"><i class="fas fa-arrow-alt-circle-left"></i> @CommonLocalizer["Back"]</button>
}
<br />
<br />

@code {

    //Code

    private bool isLoading = true;
    private char pageType;
    private Module entity;
    private bool isValidEntity;

    //Permission

    private MdUserAuthorizationReduced userAuthorization = null;
    private bool hasPermissionInsert = false;
    private bool hasPermissionRead = false;
    private bool hasPermissionUpdate = false;

    protected override async Task OnInitializedAsync()
    {
        userAuthorization = await Session.GetUserAuthorizationAsync();
        if (userAuthorization == null)
        {
            Navigation.NavigateTo("/MdlAccessManagement/Logout?reason=NoUserAuthorization");
            return;
        }

        hasPermissionRead = Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentModuleRead);
        hasPermissionInsert = Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentModuleInsert);
        hasPermissionUpdate = Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentModuleUpdate);

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageType", out var pType))
                pageType = pType.First() == "U" ? 'U' : 'R';
            else
                pageType = 'R';

            if (pageType == 'U' && (!hasPermissionUpdate))
            {
                Navigation.NavigateTo("/MdlAccessManagement/Unauthorized?withoutPermission=" + NamFeatureConstants.FeatureDevelopmentModuleUpdate.Replace(".", "_"));
                return;
            }
            else if (!hasPermissionRead)
            {
                Navigation.NavigateTo("/MdlAccessManagement/Unauthorized?withoutPermission=" + NamFeatureConstants.FeatureDevelopmentModuleRead.Replace(".", "_"));
                return;
            }

            var r = await AppHttpClient.DevelopmentModuleAGetById(int.Parse(id));
            if (r.IsSuccessStatusCode)
                entity = await r.Content.ReadFromJsonAsync<Module>();
            else
            {
                entity = new Module();

                if (r.StatusCode == HttpStatusCode.Conflict || Configuration["ShowDetailedError"] == "True")
                    await Swal.FireAsync(SwalService.Error(await r.Content.ReadAsStringAsync()));
                else
                    await Swal.FireAsync(SwalService.ErrorGeneric());

                await Back();
            }

            await OnInitializedSupportAsync();
        }
        else
        {
            pageType = 'I';

            if (pageType == 'I' && (!hasPermissionInsert))
            {
                Navigation.NavigateTo("/MdlAccessManagement/Unauthorized?withoutPermission=" + NamFeatureConstants.FeatureDevelopmentModuleInsert.Replace(".", "_"));
                return;
            }

            entity = new Module();
            entity.IsActive = true;
            await OnInitializedSupportAsync();
        }

        isLoading = false;
        StateHasChanged();
    }

    #region Actions

    async Task Save(Module e)
    {
        if (isValidEntity)
        {
            e = EntityUtil.SetEntityNotSealedTypePropertiesToNull(e);

            HttpResponseMessage r;
            if (e.Id == 0)
            {
                r = await AppHttpClient.DevelopmentModuleAInsert(e);
            }
            else
                r = await AppHttpClient.DevelopmentModuleAUpdate(e);

            if (r.IsSuccessStatusCode)
            {
                await Swal.FireAsync(SwalService.Success((e.Id == 0 ? await ResponseUtil.MessageOf(r) : await r.Content.ReadAsStringAsync()).ToString()));
                await Back();
            }
            else if (r.StatusCode == HttpStatusCode.Conflict || Configuration["ShowDetailedError"] == "True")
                await Swal.FireAsync(SwalService.Error(await r.Content.ReadAsStringAsync()));
            else
                await Swal.FireAsync(SwalService.ErrorGeneric());
        }
        else
            await Swal.FireAsync(SwalService.WarningInvalidFields());
    }

    async Task Back()
    {
        await JSRuntime.InvokeVoidAsync("backButton.goBack");
    }

    #endregion

    #region Support

    List<Application> applicationList;

    async Task OnInitializedSupportAsync()
    {
        var supportFeature = pageType == 'I' ? NamFeatureConstants.FeatureDevelopmentModuleInsert : pageType == 'U' ? NamFeatureConstants.FeatureDevelopmentModuleUpdate : NamFeatureConstants.FeatureDevelopmentModuleRead;

        applicationList = await ResponseUtil.DataOfFilterObject<List<Application>>(await AppHttpClient.DevelopmentApplicationAFilterSupport(NamFeatureConstants.ModuleDevelopment, supportFeature));
        applicationList = applicationList.OrderBy(x => x.Name).ToList();
    }

    #endregion
}