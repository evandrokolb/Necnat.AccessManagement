@page "/MdlDevelopment/ControllerSearch"

@using Necnat.AccessManagement.Client.Components.Modules.MdlDevelopment

@attribute [Authorize]

@inject IConfiguration Configuration
@inject IStringLocalizer<CommonLocalizer> CommonLocalizer
@inject IStringLocalizer<ControllerLocalizer> ControllerLocalizer
@inject INecnatSessionService Session
@inject INecnatSwalService SwalService

@inject NavigationManager Navigation
@inject SweetAlertService Swal
@inject NamHttpClient AppHttpClient

<div class="nn-page-title nn-pt1"><i class="fab fa-dev"></i> @ControllerLocalizer["Controller"]</div>
<div class="nn-page-title nn-pt2"> @CommonLocalizer["Search {0}", ControllerLocalizer["Controllers"]]</div>
<br />
@if (isLoading == true)
{
    <img class="nn-loading nn-loading-center" src="../img/loading.gif" alt="@CommonLocalizer["Loading..."]" />
}
else
{
    <ControllerSelect @ref="selectComponent" LoadOnInit="false" IsPaging="true" @bind-RecordList="recordList" SupportModuleCodeName="@NamFeatureConstants.ModuleDevelopment" SupportFeatureCodeName="@NamFeatureConstants.FeatureDevelopmentControllerRead" ApplicationList="@applicationList" ModuleList="@moduleList">
        <RadzenDataGridColumn TItem="Controller" Title="Ação">
            <Template Context="data">
                @if (Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentControllerRead, (int)NamHierarchyComponentTypeConstants.Application, moduleList.Where(x => x.Id == data.ModuleId).First().ApplicationId))
                {
                    <button class="btn nn-button-action nn-button-view" @onclick="() => Read(data.Id)" data-toggle="tooltip" title="@CommonLocalizer["View"]"><i class="fas fa-search"></i></button>
                }
                @if (Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentControllerUpdate, (int)NamHierarchyComponentTypeConstants.Application, moduleList.Where(x => x.Id == data.ModuleId).First().ApplicationId))
                {
                    <button class="btn nn-button-action nn-button-edit" @onclick="() => Update(data.Id)" data-toggle="tooltip" title="@CommonLocalizer["Edit"]"><i class="fas fa-edit"></i></button>
                }
                @if (Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentControllerDelete, (int)NamHierarchyComponentTypeConstants.Application, moduleList.Where(x => x.Id == data.ModuleId).First().ApplicationId))
                {
                    <button class="btn nn-button-action nn-button-delete" @onclick="async () => await ConfirmDeleteAsync(data.Id)" data-toggle="tooltip" title="@CommonLocalizer["Delete"]"><i class="fas fa-trash-alt"></i></button>
                }
            </Template>
        </RadzenDataGridColumn>
    </ControllerSelect>
    <br />
    <br />
    @if (recordList != null && hasPermissionInsert)
    {
        <button class="btn float-right nn-button nn-button-primary nn-button-new" @onclick="@Insert"><i class="fas fa-plus-circle nn-button-icon"></i> @CommonLocalizer["New"]</button>
    }
}
<br />
<br />

@code {

    //Code

    private bool isLoading = true;
    private ControllerSelect selectComponent;
    private List<Controller> recordList;

    //Permission

    private MdUserAuthorizationReduced userAuthorization = null;
    private bool hasPermissionInsert = false;
    private bool hasPermissionRead = false;

    protected override async Task OnInitializedAsync()
    {
        userAuthorization = await Session.GetUserAuthorizationAsync();
        if (userAuthorization == null)
        {
            Navigation.NavigateTo("/MdlAccessManagement/Logout?reason=NoUserAuthorization");
            return;
        }

        hasPermissionRead = Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentControllerRead);
        hasPermissionInsert = Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentControllerInsert);

        if (!hasPermissionRead)
        {
            Navigation.NavigateTo("/MdlAccessManagement/Unauthorized?withoutPermissionModule=" + NamFeatureConstants.ModuleDevelopment + "&withoutPermissionFeature=" + NamFeatureConstants.FeatureDevelopmentControllerRead);
            return;
        }

        await OnInitializedSupportAsync();

        isLoading = false;
        StateHasChanged();
    }

    void Read(int id)
    {
        Navigation.NavigateTo("/MdlDevelopment/ControllerMaintain?id=" + id);
    }

    void Insert()
    {
        Navigation.NavigateTo("/MdlDevelopment/ControllerMaintain");
    }

    void Update(int id)
    {
        Navigation.NavigateTo("/MdlDevelopment/ControllerMaintain?pageType=U&id=" + id);
    }

    async Task ConfirmDeleteAsync(int id)
    {
        await Swal.FireAsync(SwalService.WarningConfirmAction(new PreConfirmCallback(async () => await DeleteAsync(id), this)))
            .ContinueWith(async swalTask =>
            {
                SweetAlertResult result = await swalTask;
                if (result.Dismiss == DismissReason.Cancel)
                    await Swal.FireAsync(SwalService.WarningConfirmActionCanceled());
            });
    }

    async Task<string> DeleteAsync(int id)
    {
        var result = "0";
        var r = await AppHttpClient.DevelopmentControllerADelete(id);

        if (r.IsSuccessStatusCode)
        {
            await Swal.FireAsync(SwalService.Success(await r.Content.ReadAsStringAsync()));
            result = "1";
        }
        else if (r.StatusCode == HttpStatusCode.Conflict || Configuration["ShowDetailedError"] == "True")
            await Swal.FireAsync(SwalService.Error(await r.Content.ReadAsStringAsync()));
        else
            await Swal.FireAsync(SwalService.ErrorGeneric());

        await selectComponent.FilterAsync(true);
        return result;
    }

    #region Support

    List<Application> applicationList;
    List<Module> moduleList;

    async Task OnInitializedSupportAsync()
    {
        applicationList = await ResponseUtil.DataOfFilterObject<List<Application>>(await AppHttpClient.DevelopmentApplicationAFilterSupport(NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentControllerRead));
        applicationList = applicationList.OrderBy(x => x.Name).ToList();

        moduleList = await ResponseUtil.DataOfFilterObject<List<Module>>(await AppHttpClient.DevelopmentModuleAFilterSupport(NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentControllerRead));
        moduleList = moduleList.OrderBy(x => x.Name).ToList();
    }

    #endregion
}