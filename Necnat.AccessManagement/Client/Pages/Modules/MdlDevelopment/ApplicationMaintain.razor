@page "/MdlDevelopment/ApplicationMaintain"

@using Necnat.AccessManagement.Client.Components.Modules.MdlDevelopment

@attribute [Authorize]

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject IStringLocalizer<CommonLocalizer> CommonLocalizer
@inject IStringLocalizer<ApplicationLocalizer> ApplicationLocalizer
@inject INecnatSessionService Session
@inject INecnatSwalService SwalService

@inject NavigationManager Navigation
@inject SweetAlertService Swal
@inject NamHttpClient AppHttpClient

    <RadzenDialog />
    <div class="nn-page-title nn-pt1"><i class="fab fa-dev"></i> @ApplicationLocalizer["Application"]</div>
    @if (pageType == 'I')
    {
        <div class="nn-page-title nn-pt2"> @CommonLocalizer["New {0}", ApplicationLocalizer["Application"]]</div>
    }
    else if (pageType == 'U')
    {
        <div class="nn-page-title nn-pt2"> @CommonLocalizer["Edit {0}", ApplicationLocalizer["Application"]]</div>
    }
    else
    {
        <div class="nn-page-title nn-pt2"> @CommonLocalizer["View {0}", ApplicationLocalizer["Application"]]</div>
    }
    <br />
    @if (isLoading == true)
    {
        <img class="nn-loading nn-loading-center" src="../img/loading.gif" alt="@CommonLocalizer["Loading..."]" />
    }
    else
    {
        <RadzenTemplateForm Data="@entity" Submit="@(async (Application args) => { await Save(args); })">
            <ApplicationEntity @bind-Entity="entity" @bind-IsValidEntity="isValidEntity" AllDisabled="@(pageType == 'R')" />
            <br />
            @if (pageType != 'R')
            {
                <button type="submit" class="btn float-right nn-button nn-button-primary nn-button-save"><i class="fas fa-save"></i> @CommonLocalizer["Save"]</button>
            }
        </RadzenTemplateForm>
        @if (entity.Id != 0)
        {
            <br />
            <br />
            <br />
            if (Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApplicationHierarchyRead, (int)NamHierarchyComponentTypeConstants.Application, entity.Id))
            {
                <ApplicationHierarchyManyMany ApplicationId="entity.Id"
                                              AllowInsert="@(pageType == 'U')" AllowDelete="@(pageType == 'U')" />
            }
        }
        <br />
        <button class="btn nn-button nn-button-back" @onclick="@Back"><i class="fas fa-arrow-alt-circle-left"></i> @CommonLocalizer["Back"]</button>
    }
    <br />
    <br />

    @code {

        //Code

        private bool isLoading = true;
        private char pageType;
        private Application entity;
        private bool isValidEntity;

        //Permission

        private MdUserAuthorizationReduced userAuthorization = null;
        private bool hasPermissionInsert = false;
        private bool hasPermissionRead = false;
        private bool hasPermissionUpdate = false;

        protected override async Task OnInitializedAsync()
        {
            userAuthorization = await Session.GetUserAuthorizationAsync();
            if (userAuthorization == null)
            {
                Navigation.NavigateTo("/MdlAccessManagement/Logout?reason=NoUserAuthorization");
                return;
            }

            hasPermissionRead = Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApplicationRead);
            hasPermissionInsert = Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApplicationInsert);
            hasPermissionUpdate = Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApplicationUpdate);

            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
            {
                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageType", out var pType))
                    pageType = pType.First() == "U" ? 'U' : 'R';
                else
                    pageType = 'R';

                if (pageType == 'U' && (!hasPermissionUpdate))
                {
                    Navigation.NavigateTo("/MdlAccessManagement/Unauthorized?withoutPermission=" + NamFeatureConstants.FeatureDevelopmentApplicationUpdate.Replace(".", "_"));
                    return;
                }
                else if (!hasPermissionRead)
                {
                    Navigation.NavigateTo("/MdlAccessManagement/Unauthorized?withoutPermission=" + NamFeatureConstants.FeatureDevelopmentApplicationRead.Replace(".", "_"));
                    return;
                }

                var r = await AppHttpClient.DevelopmentApplicationAGetById(int.Parse(id));
                if (r.IsSuccessStatusCode)
                    entity = await r.Content.ReadFromJsonAsync<Application>();
                else
                {
                    entity = new Application();

                    if (r.StatusCode == HttpStatusCode.Conflict || Configuration["ShowDetailedError"] == "True")
                        await Swal.FireAsync(SwalService.Error(await r.Content.ReadAsStringAsync()));
                    else
                        await Swal.FireAsync(SwalService.ErrorGeneric());

                    await Back();
                }
            }
            else
            {
                pageType = 'I';

                if (pageType == 'I' && (!hasPermissionInsert))
                {
                    Navigation.NavigateTo("/MdlAccessManagement/Unauthorized?withoutPermission=" + NamFeatureConstants.FeatureDevelopmentApplicationInsert.Replace(".", "_"));
                    return;
                }

                entity = new Application();
                entity.IsActive = true;
            }

            isLoading = false;
            StateHasChanged();
        }

        #region Actions

        async Task Save(Application e)
        {
            if (isValidEntity)
            {
                HttpResponseMessage r;
                if (e.Id == 0)
                {
                    r = await AppHttpClient.DevelopmentApplicationInsertAndAddToHierarchyApplications(e);
                }
                else
                    r = await AppHttpClient.DevelopmentApplicationAUpdate(e);

                if (r.IsSuccessStatusCode)
                {
                    await Swal.FireAsync(SwalService.Success((e.Id == 0 ? await ResponseUtil.MessageOf(r) : await r.Content.ReadAsStringAsync()).ToString()));
                    await Back();
                }
                else if (r.StatusCode == HttpStatusCode.Conflict || Configuration["ShowDetailedError"] == "True")
                    await Swal.FireAsync(SwalService.Error(await r.Content.ReadAsStringAsync()));
                else
                    await Swal.FireAsync(SwalService.ErrorGeneric());
            }
            else
                await Swal.FireAsync(SwalService.WarningInvalidFields());
        }

        async Task Back()
        {
            await JSRuntime.InvokeVoidAsync("backButton.goBack");
        }

        #endregion
    }