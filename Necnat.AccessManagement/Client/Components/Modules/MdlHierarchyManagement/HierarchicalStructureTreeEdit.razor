@inject INecnatSwalService SwalService

@inject NavigationManager Navigation
@inject DialogService Dialog
@inject SweetAlertService Swal
@inject NamHttpClient AppHttpClient

@if (_record.HierarchicalStructureTreeAllowedList.Where(x => x.Id == 1).First().IsAllowed)
{
    <button class="btn nn-button-action nn-hierarchical-structure-tree-button-action" @onclick="() => InsertHierarchicalStructure(_record.HierarchyComponent.HierarchyComponentTypeId, _record.HierarchyComponent.HierarchyComponentType.Name, _record.HierarchyComponent.Id, _record.HierarchyComponent.Name)"><i class="fas fa-plus-circle"></i></button>
}
@if (_record.HierarchicalStructureTreeAllowedList.Where(x => x.Id == 2).First().IsAllowed)
{
    <button class="btn nn-button-action nn-hierarchical-structure-tree-button-action" @onclick="() => ConfirmDeleteAsync(_record.HierarchicalStructure.Id)"><i class="fas fa-times-circle"></i></button>
}
<RadzenFieldset AllowCollapse="true" Collapsed="false" class="nn-hierarchical-structure-tree" Style="margin-top: -39px; margin-left: 40px;">
    <HeaderTemplate>
        <span>
            <span class="nn-hierarchical-structure-tree-type-name">[ @(_record.HierarchyComponent.HierarchyComponentType.Name) ]</span>
            &nbsp;&nbsp;&nbsp;
            <span class="nn-hierarchical-structure-tree-name">@(_record.HierarchyComponent.Name)</span>
        </span>
    </HeaderTemplate>
    <ChildContent>
        <br />
        @foreach (var iRecord in RecordList.Where(x => x.HierarchicalStructure.ParentHierarchicalStructureId == RecordId))
        {
            <HierarchicalStructureTreeEdit RecordId="iRecord.HierarchicalStructure.Id" RecordList="RecordList" HierarchyComponentTypeList="HierarchyComponentTypeList" Refresh="Refresh"></HierarchicalStructureTreeEdit>
        }
    </ChildContent>
</RadzenFieldset>

@code {

    [Parameter]
    public int RecordId { get; set; }

    [Parameter]
    public List<MdHierarchicalStructureTree> RecordList { get; set; }

    [Parameter]
    public List<HierarchyComponentType> HierarchyComponentTypeList { get; set; }

    [Parameter]
    public EventCallback<bool> Refresh { get; set; }

    private MdHierarchicalStructureTree _record;

    protected override void OnInitialized()
    {
        _record = RecordList.Where(x => x.HierarchicalStructure.Id == RecordId).First();
    }

    string insertHierarchicalStructure = "InsertHierarchicalStructure";

    void InsertHierarchicalStructure(int hierarchyComponentTypeId, string hierarchyComponentTypeName, int hierarchyComponentId, string hierarchyComponentName)
    {
        Dialog.Open<HierarchicalStructureTreeInsertModal>("", new Dictionary<string, object>() {
                { "DialogName", insertHierarchicalStructure },
                { "Entity", new HierarchicalStructure { ParentHierarchicalStructureId = _record.HierarchicalStructure.Id, HierarchyId = _record.HierarchicalStructure.HierarchyId } },
                { "ParentHierarchyComponentTypeId", hierarchyComponentTypeId },
                { "ParentHierarchyComponentTypeName", hierarchyComponentTypeName },
                { "ParentHierarchyComponentId", hierarchyComponentId },
                { "ParentHierarchyComponentName", hierarchyComponentName },
                { "HierarchyComponentTypeList", HierarchyComponentTypeList } },
                RadzenConstants.DIALOG_OPTIONS);
    }

    async Task ConfirmDeleteAsync(int id)
    {
        await Swal.FireAsync(SwalService.WarningConfirmAction(new PreConfirmCallback(async () => await DeleteAsync(id), this)))
            .ContinueWith(async swalTask =>
            {
                SweetAlertResult result = await swalTask;
                if (result.Dismiss == DismissReason.Cancel)
                    await Swal.FireAsync(SwalService.WarningConfirmActionCanceled());
            });
    }

    async Task<string> DeleteAsync(int id)
    {
        var result = "0";
        var r = await AppHttpClient.HierarchyManagementHierarchicalStructureADelete(id);

        if (r.IsSuccessStatusCode)
        {
            await Swal.FireAsync(SwalService.Success(await r.Content.ReadAsStringAsync()));
            result = "1";
        }
        else if (r.StatusCode == HttpStatusCode.Conflict)
            await Swal.FireAsync(SwalService.Error(await r.Content.ReadAsStringAsync()));
        else
            await Swal.FireAsync(SwalService.ErrorGeneric());

        await Refresh.InvokeAsync(true);
        return result;
    }
}