@inject IConfiguration Configuration
@inject IStringLocalizer<CommonLocalizer> CommonLocalizer
@inject IStringLocalizer<ControllerLocalizer> ControllerLocalizer
@inject IStringLocalizer<ApiLocalizer> ApiLocalizer
@inject INecnatSessionService Session
@inject INecnatSwalService SwalService

@inject NavigationManager Navigation
@inject SweetAlertService Swal
@inject NamHttpClient AppHttpClient

@if (hasPermissionRead)
{
    @if (isLoading == true)
    {
        <img class="nn-loading nn-loading-center" src="../img/loading.gif" alt="@CommonLocalizer["Loading..."]" />
    }
    else
    {
        <RadzenPanel class="nn-filter" AllowCollapse="true">
            <HeaderTemplate>
                <span>
                    <i class="fas fa-link"></i><span class="nn-filter-header">@ApiLocalizer["Apis"]</span>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <hr />
                <RadzenDataGrid class="nn-data-grid" AllowColumnResize="true" AllowSorting="true" AllowPaging="true" EmptyText="@CommonLocalizer["No records to display."]"
                                AllowFiltering="true" FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                PageSize="PageSize" IsLoading="(recordList == null)" TItem="Api" Data="recordList">
                    <Columns>
                        <RadzenDataGridColumn TItem="Api" Property="HttpMethodId" Title="@ApiLocalizer["HttpMethod"]">
                            <Template Context="data">
                                <div>@httpMethodList.Where(x => x.Id == data.HttpMethodId).First().Name</div>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn CssClass="nn-column" TItem="Api" Property="Name" Title="@ApiLocalizer["Name"]" />
                        <RadzenDataGridColumn CssClass="nn-column" TItem="Api" Property="Version" Title="@ApiLocalizer["Version"]" />
                        <RadzenDataGridColumn CssClass="nn-column" TItem="Api" Property="IsActive" Title="@ApiLocalizer["IsActive"]">
                            <Template Context="data">
                                <RadzenCheckBox class="nn-checkbox" @bind-Value="data.IsActive" Disabled="true" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Api" Title="Ação">
                            <Template Context="data">
                                @if (AllowRead && Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApiRead, (int)NamHierarchyComponentTypeConstants.Application, ApplicationId))
                                {
                                    <button class="btn nn-button-action nn-button-view" @onclick="() => Read(data.Id)" data-toggle="tooltip" title="@CommonLocalizer["View"]"><i class="fas fa-search"></i></button>
                                }
                                @if (AllowUpdate && Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApiUpdate, (int)NamHierarchyComponentTypeConstants.Application, ApplicationId))
                                {
                                    <button class="btn nn-button-action nn-button-edit" @onclick="() => Update(data.Id)" data-toggle="tooltip" title="@CommonLocalizer["Edit"]"><i class="fas fa-edit"></i></button>
                                }
                                @if (AllowDelete && Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApiDelete, (int)NamHierarchyComponentTypeConstants.Application, ApplicationId))
                                {
                                    <button class="btn nn-button-action nn-button-delete" @onclick="async () => await ConfirmDeleteAsync(data.Id)" data-toggle="tooltip" title="@CommonLocalizer["Delete"]"><i class="fas fa-trash-alt"></i></button>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <br />
                @if (AllowInsert && hasPermissionInsert)
                {
                    <button type='button' class="btn float-right nn-button nn-button-primary nn-button-new" @onclick="@Insert"><i class="fas fa-plus-circle nn-button-icon"></i> @CommonLocalizer["Add"]</button>
                }
            </ChildContent>
        </RadzenPanel>
    }
}

@code {

    //DataGrid Parameters

    [Parameter]
    public int PageSize { get; set; } = 5;

    //Parameters

    [Parameter]
    public int ControllerId { get; set; }

    //Code

    bool isLoading = true;
    List<Api> recordList;
    List<Necnat.Shared.Domains.HttpMethod> httpMethodList = HttpMethodDomain.GetAll();

    //Permission

    [Parameter]
    public bool AllowRead { get; set; }

    [Parameter]
    public bool AllowInsert { get; set; }

    [Parameter]
    public bool AllowUpdate { get; set; }

    [Parameter]
    public bool AllowDelete { get; set; }

    private MdUserAuthorizationReduced userAuthorization = null;
    private bool hasPermissionInsert = false;
    private bool hasPermissionRead = false;

    protected override async Task OnInitializedAsync()
    {
        userAuthorization = await Session.GetUserAuthorizationAsync();
        if (userAuthorization == null)
        {
            Navigation.NavigateTo("/MdlAccessManagement/Logout?reason=NoUserAuthorization");
            return;
        }

        await OnInitializedSupportAsync();

        hasPermissionRead = Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApiRead, (int)NamHierarchyComponentTypeConstants.Application, ApplicationId);
        hasPermissionInsert = Session.HasModuleFeature(userAuthorization, NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApiInsert, (int)NamHierarchyComponentTypeConstants.Application, ApplicationId);

        if (!hasPermissionRead)
            return;

        recordList = await (await AppHttpClient.DevelopmentApiASearchByControllerId(ControllerId)).Content.ReadFromJsonAsync<List<Api>>();

        isLoading = false;
        StateHasChanged();
    }

    void Read(int id)
    {
        Navigation.NavigateTo("/MdlDevelopment/ApiMaintain?id=" + id);
    }

    void Insert()
    {
        Navigation.NavigateTo("/MdlDevelopment/ApiMaintain?controllerId=" + ControllerId);
    }

    void Update(int id)
    {
        Navigation.NavigateTo("/MdlDevelopment/ApiMaintain?pageType=U&id=" + id);
    }

    async Task ConfirmDeleteAsync(int id)
    {
        await Swal.FireAsync(SwalService.WarningConfirmAction(new PreConfirmCallback(async () => await DeleteAsync(id), this)))
            .ContinueWith(async swalTask =>
            {
                SweetAlertResult result = await swalTask;
                if (result.Dismiss == DismissReason.Cancel)
                    await Swal.FireAsync(SwalService.WarningConfirmActionCanceled());
            });
    }

    async Task<string> DeleteAsync(int id)
    {
        var result = "0";
        var r = await AppHttpClient.DevelopmentApiADelete(id);

        if (r.IsSuccessStatusCode)
        {
            await Swal.FireAsync(SwalService.Success(await r.Content.ReadAsStringAsync()));
            result = "1";
        }
        else if (r.StatusCode == HttpStatusCode.Conflict || Configuration["ShowDetailedError"] == "True")
            await Swal.FireAsync(SwalService.Error(await r.Content.ReadAsStringAsync()));
        else
            await Swal.FireAsync(SwalService.ErrorGeneric());

        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        return result;
    }

    #region Support

    [Parameter]
    public int ApplicationId { get; set; }

    [Parameter]
    public int ModuleId { get; set; }

    List<Module> moduleList;
    List<Controller> controllerList;

    async Task OnInitializedSupportAsync()
    {
        if (ApplicationId == 0)
        {
            moduleList = await ResponseUtil.DataOfFilterObject<List<Module>>(await AppHttpClient.DevelopmentModuleAFilterSupport(NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApiRead));
            moduleList = moduleList.OrderBy(x => x.Name).ToList();
        }
        else
            return;

        if (ModuleId == 0)
        {
            controllerList = await ResponseUtil.DataOfFilterObject<List<Controller>>(await AppHttpClient.DevelopmentControllerAFilterSupport(NamFeatureConstants.ModuleDevelopment, NamFeatureConstants.FeatureDevelopmentApiRead));
            controllerList = controllerList.OrderBy(x => x.Name).ToList();

            ModuleId = controllerList.Where(x => x.Id == ControllerId).First().ModuleId;
        }

        ApplicationId = moduleList.Where(x => x.Id == ModuleId).First().ApplicationId;
    }

    #endregion
}